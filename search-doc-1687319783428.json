[{"title":"Intro","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/docs/intro","content":"Intro","keywords":""},{"title":"Settings","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Settings","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Settings","url":"/Tria-Escape-MapLib/api/Settings#functions","content":" "},{"title":"GetSetting​","type":1,"pageTitle":"Settings","url":"/Tria-Escape-MapLib/api/Settings#GetSetting","content":"This item only works when running on the client. Client &lt;/&gt; Settings:GetSetting(gui: string) → any? This function can be used to get the value of a setting. Example: -- Changes the camera FOV to an arbitrary number and then sets it back to the saved settings value. local SettingsFeature = Maplib:GetFeature(&quot;Settings&quot;) local camera = workspace.CurrentCamera camera.FieldOFView = 120 task.wait(3) camera.FieldOFView = SettingsFeature:GetSetting(&quot;Field Of View&quot;)  "},{"title":"Teleport","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Teleport","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Teleport","url":"/Tria-Escape-MapLib/api/Teleport#functions","content":" "},{"title":"Teleport​","type":1,"pageTitle":"Teleport","url":"/Tria-Escape-MapLib/api/Teleport#Teleport","content":"This item only works when running on the client. Client since 0.11 &lt;/&gt; Teleport:Teleport( player: {Player? } | Player , endingPosition: CFrame | Vector3 , faceFront: boolean ) → () This function can be used to teleport players. Example: --Teleports all players ingame to map.Destination and makes the camera face the front. local PlayersFeature = Maplib:GetFeature(&quot;Players&quot;) local TeleportFeature = Maplib:GetFeature(&quot;Teleport&quot;) for _, player in pairs(PlayersFeature:GetPlayers()) do TeleportFeature:Teleport(player, map.Destination.Position, true) end  "},{"title":"PlayerUI","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/PlayerUI","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PlayerUI","url":"/Tria-Escape-MapLib/api/PlayerUI#functions","content":" "},{"title":"LoadUI​","type":1,"pageTitle":"PlayerUI","url":"/Tria-Escape-MapLib/api/PlayerUI#LoadUI","content":"This item only works when running on the client. Client since 0.11 &lt;/&gt; PlayerUI:LoadUI(gui: ScreenGui ) → () This function can be used to load a ScreenGui from the map into the players PlayerGUI. Example: -- Loads an UI for everyone in the round local PlayersFeature = Maplib:GetFeature(&quot;Players&quot;) local PlayerUI = MapLib:GetFeature(&quot;PlayerUI&quot;) local ui = map:WaitForChild(&quot;MyGUI&quot;) for _, player in pairs(PlayersFeature:GetPlayers()) do if player and player.Character then PlayerUI:LoadUI(ui) end end  "},{"title":"Seamless Spectate","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/docs/Tutorials/SeamlessSpectate","content":"","keywords":""},{"title":"Anchoring the player​","type":1,"pageTitle":"Seamless Spectate","url":"/Tria-Escape-MapLib/docs/Tutorials/SeamlessSpectate#anchoring-the-player","content":"When you anchor the player it stops the replication of the player, when the player is unanchored it takes a second for the replication to start again which makes it looks like the player is lagging for other players. "},{"title":"Mitigation​","type":1,"pageTitle":"Seamless Spectate","url":"/Tria-Escape-MapLib/docs/Tutorials/SeamlessSpectate#mitigation","content":"If you want to anchor the player but you also want the effect to be seamless then you need to set the players client position to the desired position every heartbeat. Example: local RunService = game:GetService(&quot;RunService&quot;) -- Put the players CFrame into a variable local anchorPoint = humanoidRootPart.CFrame -- Begin the anchor local heartbeat = RunService.Heartbeat:Connect(function() -- Set the characters Velocity to 0 humanoidRootPart.AssemblyLinearVelocity = Vector3.new() -- Set the characters CFrame to the saved point humanoidRootPart.CFrame = anchorPoint end) -- End the anchor heartbeat:Disconnect()  "},{"title":"Changing the characters position on the server​","type":1,"pageTitle":"Seamless Spectate","url":"/Tria-Escape-MapLib/docs/Tutorials/SeamlessSpectate#changing-the-characters-position-on-the-server","content":"When you change the position of the character on the server it takes over replication from the client, this causes similar effects to anchoring the player "},{"title":"Mitigation​","type":1,"pageTitle":"Seamless Spectate","url":"/Tria-Escape-MapLib/docs/Tutorials/SeamlessSpectate#mitigation-1","content":"To make the effect seamless all you need to do is make the teleportation happen on the client, not only will this make the teleportation seamless to other players it will also make the effect more seamless for the player as well. "},{"title":"Cleanup","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Cleanup","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Cleanup","url":"/Tria-Escape-MapLib/api/Cleanup#functions","content":" "},{"title":"Janitor.new​","type":1,"pageTitle":"Cleanup","url":"/Tria-Escape-MapLib/api/Cleanup#Janitor.new","content":"since 0.11 &lt;/&gt; Cleanup.Janitor.new(name: string?) → Janitor   "},{"title":"GetJanitor​","type":1,"pageTitle":"Cleanup","url":"/Tria-Escape-MapLib/api/Cleanup#GetJanitor","content":"since 0.11 &lt;/&gt; Cleanup:GetJanitor(janitorName: string | number) → Janitor This method returns a Janitor class with the given name  "},{"title":"GetJanitors​","type":1,"pageTitle":"Cleanup","url":"/Tria-Escape-MapLib/api/Cleanup#GetJanitors","content":"since 0.11 &lt;/&gt; Cleanup:GetJanitors() → {Janitor} This method returns all the active Janitor classes. "},{"title":"EffectScript","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/docs/Tutorials/EffectScript","content":"","keywords":""},{"title":"Example of usage​","type":1,"pageTitle":"EffectScript","url":"/Tria-Escape-MapLib/docs/Tutorials/EffectScript#example-of-usage","content":"The EffectScript uses the same methods as the MapScript to get the MapLib, beinglocal MapLib = game.GetMapLib:Invoke()() Below is a simple example of how to use the EffectScript, in this example we will make a laser effect similar to Dystopia. MapScript local MapLib = game.GetMapLib:Invoke()() local map = MapLib.map task.wait(10) map.StartLaser:FireAllClients() task.wait(10) map.StopLaser:FireAllClients()  EffectScript local MapLib = game.GetMapLib:Invoke()() local map = MapLib.map local RunService = game:GetService(&quot;RunService&quot;) local connection map.StartLaser.OnClientEvent:Connect(function() connection = RunService.Heartbeat:Connnect(function() laser.CFrame *= CFrame.Angles(math.rad(1), 0, 0) end) end) map.StopLaser.OnClientEvent:Connect(function() if connection then connection:Disconnect() end end)  "},{"title":"Players","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Players","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Players","url":"/Tria-Escape-MapLib/api/Players#functions","content":" "},{"title":"GetPlayers​","type":1,"pageTitle":"Players","url":"/Tria-Escape-MapLib/api/Players#GetPlayers","content":"&lt;/&gt; Players:GetPlayers() → {Player? } This function can be used to get all players in the current round. Example: --Teleports all players ingame to map.Destination. local PlayersFeature = Maplib:GetFeature(&quot;Players&quot;) local TeleportFeature = Maplib:GetFeature(&quot;Teleport&quot;) for _, player in pairs(PlayersFeature:GetPlayers()) do TeleportFeature:Teleport(player, map.Destination.Position) end   "},{"title":"GetPlayersInRadius​","type":1,"pageTitle":"Players","url":"/Tria-Escape-MapLib/api/Players#GetPlayersInRadius","content":"since 0.11 &lt;/&gt; Players:GetPlayersInRadius( position: Vector3 , radius: number ) → {Player? } This function can be used to get all the players which are in a radius from a position. Example: --Teleports all players that are within 5 studs from map.Spawn. local PlayersFeature = Maplib:GetFeature(&quot;Players&quot;) local TeleportFeature = Maplib:GetFeature(&quot;Teleport&quot;) for _, player in pairs(PlayersFeature:GetPlayersInRadius(map.Spawn.Position, 5)) do TeleportFeature:Teleport(player, map.Destination.Position) end  "},{"title":"Skills","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Skills","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Skills","url":"/Tria-Escape-MapLib/api/Skills#functions","content":" "},{"title":"ToggleSliding​","type":1,"pageTitle":"Skills","url":"/Tria-Escape-MapLib/api/Skills#ToggleSliding","content":"since 0.11 &lt;/&gt; Skills:ToggleSliding(value: boolean) → () This function can be used for toggling sliding on or off during a map. Example: local SkillsFeature = Maplib:GetFeature(&quot;Skills&quot;) SkillsFeature:ToggleSliding(false) task.wait(5) SkillsFeature:ToggleSliding(true)   "},{"title":"ToggleAirDive​","type":1,"pageTitle":"Skills","url":"/Tria-Escape-MapLib/api/Skills#ToggleAirDive","content":"since 0.11 &lt;/&gt; Skills:ToggleAirDive(value: boolean) → () This function can be used for toggling airdive on or off during a map. Example: local SkillsFeature = Maplib:GetFeature(&quot;Skills&quot;) SkillsFeature:ToggleAirDive(false) task.wait(5) SkillsFeature:ToggleAirDive(true)  "},{"title":"Janitor","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Janitor","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Janitor","url":"/Tria-Escape-MapLib/api/Janitor#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Janitor","url":"/Tria-Escape-MapLib/api/Janitor#new","content":"since 0.11 &lt;/&gt; Janitor.new(name: string?) → ( _tasks: {[string]: any}, context: string, name: string?, index: number | string, __index: Janitor ) Constructs a new Janitor class and is cached for later use. Janitor provides an option in case you want to name your Janitor for easier reference later.  "},{"title":"isJanitor​","type":1,"pageTitle":"Janitor","url":"/Tria-Escape-MapLib/api/Janitor#isJanitor","content":"since 0.11 &lt;/&gt; Janitor.isJanitor() → boolean Returns true if the given class is a Janitor, if not it returns false.  "},{"title":"Give​","type":1,"pageTitle":"Janitor","url":"/Tria-Escape-MapLib/api/Janitor#Give","content":"since 0.11 &lt;/&gt; Janitor:Give(task: any) → nil Example: local janitor = MapLib:GetFeature(&quot;Cleanup&quot;).Janitor.new() -- Constructs new Janitor local part = Instance.new(&quot;Part&quot;) part.Anchored = true part.Size = Vector3.new(1, 1, 1) part.Parent = workspace janitor:Give(part) task.wait(5) janitor:Cleanup() -- Destroys the part This method is used to give Janitor tasks to cleanup, these tasks can be anything, some examples include, functions, threads, coroutines or anything with a .Destroy function. tip Janitor allows for tables to be given in as an argument. If Janitor detects a table it will loop through the table and add anything it finds will be added to the tasks table. local janitor = MapLib:GetFeature(&quot;Cleanup&quot;).Janitor.new() -- Constructs new Janitor local connection1 = RunService.Heartbeat:Connect(function() print(&quot;Running&quot;) end) local connection2 = RunService.Heartbeat:Connect(function() print(&quot;Running&quot;) end) janitor:Give({connection1, connection2}) task.wait(5) janitor:Cleanup() -- Destroys both connections caution Janitor does not have the ability to completly clear references if they are defined to a variable. To initate proper garbage collection using Janitor we recommend setting the variable to reference = janitor:Give(task) which will set the reference to nil. local janitor = MapLib:GetFeature(&quot;Cleanup&quot;).Janitor.new() -- Constructs new Janitor local part = Instance.new(&quot;Part&quot;) part.Anchored = true part.Size = Vector3.new(1, 1, 1) part.Parent = workspace part = janitor:Give(part) --Since :Give returns nil we can lose the reference and initate proper garbage collection. task.wait(5) janitor:Cleanup() -- Destroys the part and initates garbage collection   "},{"title":"Cleanup​","type":1,"pageTitle":"Janitor","url":"/Tria-Escape-MapLib/api/Janitor#Cleanup","content":"since 0.11 &lt;/&gt; Janitor:Cleanup() → nil Calls for the Janitor to cleanup up all the tasks it was given.  "},{"title":"Destroy​","type":1,"pageTitle":"Janitor","url":"/Tria-Escape-MapLib/api/Janitor#Destroy","content":"since 0.11 &lt;/&gt; Janitor:Destroy() → nil Completely destroys Janitor and all references to it. If the Janitor has tasks then those tasks are cleaned up. "},{"title":"Lighting","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/Lighting","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Lighting","url":"/Tria-Escape-MapLib/api/Lighting#functions","content":" "},{"title":"SetLighting​","type":1,"pageTitle":"Lighting","url":"/Tria-Escape-MapLib/api/Lighting#SetLighting","content":"since 0.11 &lt;/&gt; Lighting:SetLighting( properties: {[string]: any}, postEffects: {[string]: {[string]: any}} ) → () This function can to be used to change the lighting of a map mid round. We discourage usage of changing lighting with game.Lighting[Property] = value cause it doesnt replicate for spectators. Example: -- Changes the fog to 100 and the fog color to white local LightingFeature = Maplib:GetFeature(&quot;Lighting&quot;) LightingFeature:SetLighting({ FogEnd = 100, FogColor = Color3.fromRGB(255, 255, 255) }) info This function also supports lighting effects to be updated and they will be replicated to specators. -- Changes the fog to 100 and the fog color to white and makes everything monochrome. local LightingFeature = Maplib:GetFeature(&quot;Lighting&quot;) LightingFeature:SetLighting({ FogEnd = 100, FogColor = Color3.fromRGB(255, 255, 255) }, { ColorCorrection = { Saturation = -1, }, }) caution For the game to be able to edit post effects they have to be correctly placed inside the lighting folder inside settings. If they are created in a script the game will not see these and refuse to update the lighting properties. tip Since atmosphere instances don't have any enabled or disabled property we can get around that by parenting the instance to ReplicatedStorage and then we can parent it back to lighting when we need it. local LightingFeature = Maplib:GetFeature(&quot;Lighting&quot;) --Disables the atmosphere effect LightingFeature:SetLighting({}, { Atmosphere = { Parent = game.ReplicateStorage, }, }) task.wait(5) --Enables the atmosphere effect LightingFeature:SetLighting({}, { Atmosphere = { Parent = game.Lighting, }, })  "},{"title":"MapLib","type":0,"sectionRef":"#","url":"/Tria-Escape-MapLib/api/MapLib","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#properties","content":" "},{"title":"map​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#map","content":"This item is read only and cannot be modified. Read Only since 0.5 &lt;/&gt; MapLib.map: Model  This is the map model.  "},{"title":"RoundEnding​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#RoundEnding","content":"since 0.7 &lt;/&gt; MapLib.RoundEnding: RBXScriptSignal  A RBXScriptSignal that is fired when a map ends. Example: MapLib.MapEnded:Connect(function() MapLib:Alert(&quot;The round has ended&quot;, Color3.new(0, 255, 0), 2.5) end)  "},{"title":"Functions​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#functions","content":" "},{"title":"Alert​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#Alert","content":"since 0.2.4 &lt;/&gt; MapLib:Alert( message: string, color: Color3 | string, length: number? ) → nil This method can be used to send an alert, these alerts can be customized by color and duration. Example: MapLib:Alert(&quot;Hello world!&quot;, Color3.new(255, 255, 255), 3) -- Creates an alert with the given message with the color white and the duration of 3 seconds. tip You can pass the color argument as string and it'll still work, just make sure to use a common color name! MapLib:Alert(&quot;Hello world!&quot;, &quot;red&quot;, 3)   "},{"title":"ChangeMusic​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#ChangeMusic","content":"since 0.4 &lt;/&gt; MapLib:ChangeMusic( musicId: number, volume: number?, startTick: number? ) → () This method can be used to change the current music playing in a map, this also replicates to people spectating. Example: MapLib:ChangeMusic(12245541717, 1, 5) -- Changes the currently playing music to volume 1 and starts at 5 seconds in.   "},{"title":"GetButtonEvent​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#GetButtonEvent","content":"This item only works when running on the server. Server since 0.2.4 &lt;/&gt; MapLib:GetButtonEvent(buttonId: number | string) → any This method can be used to run functions once a specific button has been pressed. Example: MapLib:GetButtonEvent(5):Connect(function(player: Player?) MapLib:Alert(&quot;Button 5 was pressed!&quot;, Color3.fromRGB(255, 255, 255), 4) end) note The player argument here is the player that pressed the button or nil if the button was activated automatically. tip Path buttons work the same as normal buttons, you just need to give a valid button ID in quotation marks (e.g. &quot;6A&quot;) Example: MapLib:GetButtonEvent(&quot;6A&quot;):Connect(function(player: Player?) MapLib:Alert(&quot;Button 6A was pressed!&quot;, Color3.fromRGB(255, 0, 0), 5) end)   "},{"title":"Survive​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#Survive","content":"This item only works when running on the server. Server since 0.8 &lt;/&gt; MapLib:Survive(player: Player ) → () This method can be used to make a player survive the round without touching the ExitRegion. Example: local Players = game:GetService(&quot;Players&quot;) local MapLib = game.GetMapLib:Invoke()() script.Parent.Touched:Connect(function(other) local player = Players:GetPlayerFromCharacter(other.Parent) if player then MapLib:Survive(player) end end)   "},{"title":"SetLiquidType​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#SetLiquidType","content":"since 0.2.4 &lt;/&gt; MapLib:SetLiquidType( liquid: BasePart , liquidType: string ) → () This method can be used to change the state of a liquid. There are 3 default types you can choose, these are water, acid and lava. Example: MapLib:SetLiquidType(map.Liquid1, &quot;lava&quot;) -- Changes the liquidType of map.Liquid1 to lava. tip You can make your own liquid type in your map's Settings.Liquids folder. For example a custom liquid type named &quot;bromine&quot; will have the usage: MapLib:SetLiquidType(map.LiquidWater, &quot;bromine&quot;)   "},{"title":"Move​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#Move","content":"since 0.9 &lt;/&gt; MapLib:Move( moveable: PVInstance , movement: Vector3 , duration: number? ) → () Used to move PVInstances. Example: MapLib:Move(map.MovingPart1, Vector3.new(12, 0, 0), 3) -- Moves map.MovingPart1 along the X axis 12 studs and finishes moving after 3 seconds   "},{"title":"MoveRelative​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#MoveRelative","content":"since 0.9 &lt;/&gt; MapLib:MoveRelative( moveable: PVInstance , movement: Vector3 , duration: number? ) → () Used to move PVInstances. Example: MapLib:MoveRelative(map.MovingPart2, Vector3.new(12, 0, 0), 5) --- Moves map.MovingPart2 relative to its rotation.   "},{"title":"GetPlayers​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#GetPlayers","content":"since 0.9 &lt;/&gt; MapLib:GetPlayers() → {Player } This method returns a table containing players currently in a map.  "},{"title":"GetFeature​","type":1,"pageTitle":"MapLib","url":"/Tria-Escape-MapLib/api/MapLib#GetFeature","content":"since 0.5.6 &lt;/&gt; MapLib:GetFeature(name: string) → () This method is used to get any features listed in the features list. "}]